// i18n (Internationalization) system for AutoBacklinker
export interface Translation {
    // Plugin basics
    pluginName: string;
    pluginLoaded: string;
    
    // Main interface
    auto: string;
    manual: string;
    paused: string;
    
    // Commands
    commands: {
        toggleAuto: string;
        rebuildIndex: string;
        processCurrent: string;
        processIncremental: string;
        processVault: string;
        preview: string;
        stats: string;
        synonyms: string;
        templates: string;
        pause: string;
        smartSuggestions: string;
    };
    
    // Notices
    notices: {
        noActiveNote: string;
        processSuccess: string;
        incrementalComplete: string;
        vaultComplete: string;
        noNewNotes: string;
        noLinksToCreate: string;
        linkCreated: string;
        processingPaused: string;
        processingResumed: string;
        indexRebuilt: string;
        fileProcessError: string;
        smartDisabled: string;
        noSmartSuggestions: string;
    };
    
    // Settings
    settings: {
        title: string;
        koreanParticles: {
            name: string;
            desc: string;
        };
        autoLinkOnSave: {
            name: string;
            desc: string;
        };
        excludeFolders: {
            name: string;
            desc: string;
        };
        batchSize: {
            name: string;
            desc: string;
        };
        smartFiltering: {
            title: string;
            avoidOverlinking: {
                name: string;
                desc: string;
            };
            showPreview: {
                name: string;
                desc: string;
            };
        };
        linkQuality: {
            title: string;
            enableSynonyms: {
                name: string;
                desc: string;
            };
            ignoreCase: {
                name: string;
                desc: string;
            };
        };
        bidirectionalLinks: {
            title: string;
            autoCreateBacklinks: {
                name: string;
                desc: string;
            };
        };
        advanced: {
            title: string;
            enableStats: {
                name: string;
                desc: string;
            };
            enableSmart: {
                name: string;
                desc: string;
            };
        };
        language: {
            name: string;
            desc: string;
        };
        lastIncrementalRun: string;
    };
    
    // Modals
    modals: {
        linkPreview: {
            title: string;
            confidence: string;
            context: string;
            selectAndCreate: string;
            cancel: string;
        };
        linkStats: {
            title: string;
            overall: string;
            currentSession: string;
            recentActivity: string;
            totalLinks: string;
            processedNotes: string;
            averageLinks: string;
            close: string;
        };
        synonymManager: {
            title: string;
            addGroup: string;
            primaryWord: string;
            synonymsPlaceholder: string;
            delete: string;
            save: string;
            cancel: string;
        };
        templateManager: {
            title: string;
            pattern: string;
            replacement: string;
            save: string;
            cancel: string;
        };
        smartSuggestions: {
            title: string;
            confidence: string;
            close: string;
        };
    };
    
    // Processing status
    processing: {
        incrementalLinking: string;
        vaultLinking: string;
        processed: string;
        errors: string;
        withErrors: string;
    };
}

// Language configurations
export const SUPPORTED_LANGUAGES = {
    'en': 'English',
    'ko': 'ÌïúÍµ≠Ïñ¥',
    'ja': 'Êó•Êú¨Ë™û',
    'zh': '‰∏≠Êñá',
    'es': 'Espa√±ol',
    'fr': 'Fran√ßais',
    'de': 'Deutsch',
    'pt': 'Portugu√™s',
    'ru': '–†—É—Å—Å–∫–∏–π'
} as const;

export type SupportedLanguage = keyof typeof SUPPORTED_LANGUAGES;

// English translations
export const EN_TRANSLATIONS: Translation = {
    pluginName: "AutoBacklinker",
    pluginLoaded: "AutoBacklinker loaded with enhanced features",
    
    auto: "AUTO",
    manual: "MANUAL", 
    paused: "PAUSED",
    
    commands: {
        toggleAuto: "Toggle auto mode (on-save)",
        rebuildIndex: "Rebuild title index",
        processCurrent: "Process current note (one-off)",
        processIncremental: "Process notes changed since last run",
        processVault: "Process whole vault (one-off)",
        preview: "Link preview",
        stats: "View link statistics",
        synonyms: "Manage synonyms",
        templates: "Manage link templates",
        pause: "Pause/resume batch processing",
        smartSuggestions: "Smart link suggestions"
    },
    
    notices: {
        noActiveNote: "üìÑ No active Markdown note",
        processSuccess: "‚úÖ Processing complete",
        incrementalComplete: "üîó Incremental linking complete",
        vaultComplete: "‚úÖ Vault-wide linking complete", 
        noNewNotes: "‚ÑπÔ∏è No new notes to process",
        noLinksToCreate: "üîç No links to create found",
        linkCreated: "link(s) created",
        processingPaused: "Batch processing paused",
        processingResumed: "Batch processing resumed",
        indexRebuilt: "üîÑ Title index rebuilt",
        fileProcessError: "‚ö†Ô∏è File processing failed",
        smartDisabled: "Smart suggestions are disabled",
        noSmartSuggestions: "üîç No smart link suggestions found"
    },
    
    settings: {
        title: "AutoBacklinker",
        koreanParticles: {
            name: "Allow Korean particles after title",
            desc: "Example: CielÏùÑ ‚Üí [[Ciel]]ÏùÑ"
        },
        autoLinkOnSave: {
            name: "Auto-link on save/modify (auto mode)",
            desc: "When ON, the plugin links the note automatically whenever you save/modify it. Use the ribbon icon or command to toggle quickly."
        },
        excludeFolders: {
            name: "Exclude folders (optional)",
            desc: 'Semicolon-separated root folders. Example: "Templates;Daily Notes"'
        },
        batchSize: {
            name: "Batch size (advanced)",
            desc: "Number of notes to process per batch during bulk operations (default 50)."
        },
        smartFiltering: {
            title: "Smart Link Filtering",
            avoidOverlinking: {
                name: "Avoid over-linking",
                desc: "Prevents creating too many links in the same paragraph."
            },
            showPreview: {
                name: "Show link preview",
                desc: "Display preview before creating links."
            }
        },
        linkQuality: {
            title: "Link Quality",
            enableSynonyms: {
                name: "Enable synonyms",
                desc: "Recognize synonyms and variations for link creation."
            },
            ignoreCase: {
                name: "Ignore case",
                desc: "Create links without distinguishing case."
            }
        },
        bidirectionalLinks: {
            title: "Bidirectional Links",
            autoCreateBacklinks: {
                name: "Auto-create backlinks",
                desc: "Automatically add backlinks to target notes when creating links."
            }
        },
        advanced: {
            title: "Advanced Features",
            enableStats: {
                name: "Enable statistics",
                desc: "Track link creation statistics and display in status bar."
            },
            enableSmart: {
                name: "Smart suggestions",
                desc: "Enable intelligent link recommendation features."
            }
        },
        language: {
            name: "Language",
            desc: "Select interface language"
        },
        lastIncrementalRun: "Last incremental run"
    },
    
    modals: {
        linkPreview: {
            title: "Link Preview",
            confidence: "Confidence",
            context: "Context",
            selectAndCreate: "Create Selected Links",
            cancel: "Cancel"
        },
        linkStats: {
            title: "Link Statistics",
            overall: "Overall Statistics",
            currentSession: "Current Session",
            recentActivity: "Recent Activity",
            totalLinks: "Total links",
            processedNotes: "Processed notes",
            averageLinks: "Average links/note",
            close: "Close"
        },
        synonymManager: {
            title: "Synonym Management",
            addGroup: "Add Synonym Group",
            primaryWord: "Primary word",
            synonymsPlaceholder: "Synonyms (comma-separated)",
            delete: "Delete",
            save: "Save",
            cancel: "Cancel"
        },
        templateManager: {
            title: "Link Template Management",
            pattern: "Pattern",
            replacement: "Replacement",
            save: "Save",
            cancel: "Cancel"
        },
        smartSuggestions: {
            title: "Smart Link Suggestions",
            confidence: "Confidence",
            close: "Close"
        }
    },
    
    processing: {
        incrementalLinking: "Incremental linking in progress",
        vaultLinking: "Vault-wide linking in progress",
        processed: "processed",
        errors: "errors",
        withErrors: "processing complete with"
    }
};

// Korean translations
export const KO_TRANSLATIONS: Translation = {
    pluginName: "AutoBacklinker",
    pluginLoaded: "AutoBacklinker Î°úÎìú ÏôÑÎ£å (Ìñ•ÏÉÅÎêú Í∏∞Îä• ÏßÄÏõê)",
    
    auto: "ÏûêÎèô",
    manual: "ÏàòÎèô",
    paused: "ÏùºÏãúÏ†ïÏßÄ",
    
    commands: {
        toggleAuto: "ÏûêÎèô Î™®Îìú Ï†ÑÌôò (Ï†ÄÏû•Ïãú)",
        rebuildIndex: "Ï†úÎ™© Ïù∏Îç±Ïä§ Ïû¨Íµ¨Ï∂ï",
        processCurrent: "ÌòÑÏû¨ ÎÖ∏Ìä∏ Ï≤òÎ¶¨ (ÏùºÌöåÏÑ±)",
        processIncremental: "ÎßàÏßÄÎßâ Ïã§Ìñâ Ïù¥ÌõÑ Î≥ÄÍ≤ΩÎêú ÎÖ∏Ìä∏ Ï≤òÎ¶¨",
        processVault: "Ï†ÑÏ≤¥ Î≥ºÌä∏ Ï≤òÎ¶¨ (ÏùºÌöåÏÑ±)",
        preview: "ÎßÅÌÅ¨ ÎØ∏Î¶¨Î≥¥Í∏∞",
        stats: "ÎßÅÌÅ¨ ÌÜµÍ≥Ñ Î≥¥Í∏∞",
        synonyms: "ÎèôÏùòÏñ¥ Í¥ÄÎ¶¨",
        templates: "ÎßÅÌÅ¨ ÌÖúÌîåÎ¶ø Í¥ÄÎ¶¨",
        pause: "Î∞∞Ïπò Ï≤òÎ¶¨ ÏùºÏãúÏ†ïÏßÄ/Ïû¨Í∞ú",
        smartSuggestions: "Ïä§ÎßàÌä∏ ÎßÅÌÅ¨ Ï∂îÏ≤ú"
    },
    
    notices: {
        noActiveNote: "üìÑ ÌôúÏÑ±Îêú ÎßàÌÅ¨Îã§Ïö¥ ÎÖ∏Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§",
        processSuccess: "‚úÖ Ï≤òÎ¶¨ ÏôÑÎ£å",
        incrementalComplete: "üîó Ï¶ùÎ∂Ñ ÎßÅÌÇπ ÏôÑÎ£å",
        vaultComplete: "‚úÖ Ï†ÑÏ≤¥ Î≥ºÌä∏ ÎßÅÌÇπ ÏôÑÎ£å",
        noNewNotes: "‚ÑπÔ∏è Ï≤òÎ¶¨Ìï† ÏÉàÎ°úÏö¥ ÎÖ∏Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§",
        noLinksToCreate: "üîç ÏÉùÏÑ±Ìï† ÎßÅÌÅ¨Í∞Ä ÏóÜÏäµÎãàÎã§",
        linkCreated: "Í∞ú ÎßÅÌÅ¨ ÏÉùÏÑ±",
        processingPaused: "Î∞∞Ïπò Ï≤òÎ¶¨ ÏùºÏãúÏ†ïÏßÄ",
        processingResumed: "Î∞∞Ïπò Ï≤òÎ¶¨ Ïû¨Í∞ú",
        indexRebuilt: "üîÑ Ï†úÎ™© Ïù∏Îç±Ïä§ Ïû¨Íµ¨Ï∂ï ÏôÑÎ£å",
        fileProcessError: "‚ö†Ô∏è ÌååÏùº Ï≤òÎ¶¨ Ïã§Ìå®",
        smartDisabled: "Ïä§ÎßàÌä∏ Ï∂îÏ≤úÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§",
        noSmartSuggestions: "üîç Ïä§ÎßàÌä∏ Ï∂îÏ≤ú ÎßÅÌÅ¨Í∞Ä ÏóÜÏäµÎãàÎã§"
    },
    
    settings: {
        title: "AutoBacklinker",
        koreanParticles: {
            name: "ÌïúÍµ≠Ïñ¥ Ï°∞ÏÇ¨ ÌóàÏö©",
            desc: "ÏòàÏãú: CielÏùÑ ‚Üí [[Ciel]]ÏùÑ"
        },
        autoLinkOnSave: {
            name: "Ï†ÄÏû•Ïãú ÏûêÎèô ÎßÅÌÅ¨ (ÏûêÎèô Î™®Îìú)",
            desc: "ÏºúÏßÄÎ©¥ ÎÖ∏Ìä∏Î•º Ï†ÄÏû•/ÏàòÏ†ïÌï† ÎïåÎßàÎã§ ÏûêÎèôÏúºÎ°ú ÎßÅÌÅ¨Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§. Î¶¨Î≥∏ ÏïÑÏù¥ÏΩòÏù¥ÎÇò Î™ÖÎ†πÏñ¥Î°ú Îπ†Î•¥Í≤å Ï†ÑÌôòÌï† Ïàò ÏûàÏäµÎãàÎã§."
        },
        excludeFolders: {
            name: "Ï†úÏô∏ Ìè¥Îçî (ÏÑ†ÌÉùÏÇ¨Ìï≠)",
            desc: 'ÏÑ∏ÎØ∏ÏΩúÎ°†ÏúºÎ°ú Íµ¨Î∂ÑÎêú Î£®Ìä∏ Ìè¥Îçî. ÏòàÏãú: "Templates;Daily Notes"'
        },
        batchSize: {
            name: "Î∞∞Ïπò ÌÅ¨Í∏∞ (Í≥†Í∏â)",
            desc: "ÎåÄÎüâ ÏûëÏóÖ Ïãú Î∞∞ÏπòÎãπ Ï≤òÎ¶¨Ìï† ÎÖ∏Ìä∏ Ïàò (Í∏∞Î≥∏ 50)."
        },
        smartFiltering: {
            title: "Ïä§ÎßàÌä∏ ÎßÅÌÅ¨ ÌïÑÌÑ∞ÎßÅ",
            avoidOverlinking: {
                name: "Í≥ºÎèÑÌïú ÎßÅÌÅ¨ Î∞©ÏßÄ",
                desc: "Í∞ôÏùÄ Î¨∏Îã®ÏóêÏÑú ÎÑàÎ¨¥ ÎßéÏùÄ ÎßÅÌÅ¨ ÏÉùÏÑ±ÏùÑ Î∞©ÏßÄÌï©ÎãàÎã§."
            },
            showPreview: {
                name: "ÎßÅÌÅ¨ ÎØ∏Î¶¨Î≥¥Í∏∞",
                desc: "ÎßÅÌÅ¨ ÏÉùÏÑ± Ï†ÑÏóê ÎØ∏Î¶¨Î≥¥Í∏∞Î•º ÌëúÏãúÌï©ÎãàÎã§."
            }
        },
        linkQuality: {
            title: "ÎßÅÌÅ¨ ÌíàÏßà",
            enableSynonyms: {
                name: "ÎèôÏùòÏñ¥ ÏßÄÏõê",
                desc: "ÎèôÏùòÏñ¥ÏôÄ Î≥ÄÌòïÏñ¥Î•º Ïù∏ÏãùÌïòÏó¨ ÎßÅÌÅ¨Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§."
            },
            ignoreCase: {
                name: "ÎåÄÏÜåÎ¨∏Ïûê Î¨¥Ïãú",
                desc: "ÎåÄÏÜåÎ¨∏ÏûêÎ•º Íµ¨Î∂ÑÌïòÏßÄ ÏïäÍ≥† ÎßÅÌÅ¨Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§."
            }
        },
        bidirectionalLinks: {
            title: "ÏñëÎ∞©Ìñ• ÎßÅÌÅ¨",
            autoCreateBacklinks: {
                name: "ÏûêÎèô Î∞±ÎßÅÌÅ¨ ÏÉùÏÑ±",
                desc: "ÎßÅÌÅ¨Î•º ÏÉùÏÑ±Ìï† Îïå ÎåÄÏÉÅ ÎÖ∏Ìä∏Ïóê Î∞±ÎßÅÌÅ¨ÎèÑ ÏûêÎèôÏúºÎ°ú Ï∂îÍ∞ÄÌï©ÎãàÎã§."
            }
        },
        advanced: {
            title: "Í≥†Í∏â Í∏∞Îä•",
            enableStats: {
                name: "ÌÜµÍ≥Ñ Í∏∞Îä•",
                desc: "ÎßÅÌÅ¨ ÏÉùÏÑ± ÌÜµÍ≥ÑÎ•º Ï∂îÏ†ÅÌïòÍ≥† ÏÉÅÌÉúÎ∞îÏóê ÌëúÏãúÌï©ÎãàÎã§."
            },
            enableSmart: {
                name: "Ïä§ÎßàÌä∏ Ï∂îÏ≤ú",
                desc: "ÏßÄÎä•Ìòï ÎßÅÌÅ¨ Ï∂îÏ≤ú Í∏∞Îä•ÏùÑ ÌôúÏÑ±ÌôîÌï©ÎãàÎã§."
            }
        },
        language: {
            name: "Ïñ∏Ïñ¥",
            desc: "Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ïñ∏Ïñ¥ ÏÑ†ÌÉù"
        },
        lastIncrementalRun: "ÎßàÏßÄÎßâ Ï¶ùÎ∂Ñ Ïã§Ìñâ"
    },
    
    modals: {
        linkPreview: {
            title: "ÎßÅÌÅ¨ ÎØ∏Î¶¨Î≥¥Í∏∞",
            confidence: "ÌôïÏã†ÎèÑ",
            context: "Ïª®ÌÖçÏä§Ìä∏",
            selectAndCreate: "ÏÑ†ÌÉùÎêú ÎßÅÌÅ¨ ÏÉùÏÑ±",
            cancel: "Ï∑®ÏÜå"
        },
        linkStats: {
            title: "ÎßÅÌÅ¨ ÌÜµÍ≥Ñ",
            overall: "Ï†ÑÏ≤¥ ÌÜµÍ≥Ñ",
            currentSession: "ÌòÑÏû¨ ÏÑ∏ÏÖò",
            recentActivity: "ÏµúÍ∑º ÌôúÎèô",
            totalLinks: "Ï¥ù ÎßÅÌÅ¨ Ïàò",
            processedNotes: "Ï≤òÎ¶¨Îêú ÎÖ∏Ìä∏ Ïàò",
            averageLinks: "ÌèâÍ∑† ÎßÅÌÅ¨/ÎÖ∏Ìä∏",
            close: "Îã´Í∏∞"
        },
        synonymManager: {
            title: "ÎèôÏùòÏñ¥ Í¥ÄÎ¶¨",
            addGroup: "ÎèôÏùòÏñ¥ Í∑∏Î£π Ï∂îÍ∞Ä",
            primaryWord: "Ï£º Îã®Ïñ¥",
            synonymsPlaceholder: "ÎèôÏùòÏñ¥ (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)",
            delete: "ÏÇ≠Ï†ú",
            save: "Ï†ÄÏû•",
            cancel: "Ï∑®ÏÜå"
        },
        templateManager: {
            title: "ÎßÅÌÅ¨ ÌÖúÌîåÎ¶ø Í¥ÄÎ¶¨",
            pattern: "Ìå®ÌÑ¥",
            replacement: "ÏπòÌôò",
            save: "Ï†ÄÏû•",
            cancel: "Ï∑®ÏÜå"
        },
        smartSuggestions: {
            title: "Ïä§ÎßàÌä∏ ÎßÅÌÅ¨ Ï∂îÏ≤ú",
            confidence: "ÌôïÏã†ÎèÑ",
            close: "Îã´Í∏∞"
        }
    },
    
    processing: {
        incrementalLinking: "Ï¶ùÎ∂Ñ ÎßÅÌÇπ ÏßÑÌñâÏ§ë",
        vaultLinking: "Ï†ÑÏ≤¥ Î≥ºÌä∏ ÎßÅÌÇπ ÏßÑÌñâÏ§ë",
        processed: "Í∞ú Ï≤òÎ¶¨",
        errors: "Í∞ú Ïò§Î•ò",
        withErrors: "Ï≤òÎ¶¨ ÏôÑÎ£å"
    }
};

// Simple i18n class
export class I18n {
    private currentLanguage: SupportedLanguage = 'en';
    private translations: Record<SupportedLanguage, Translation> = {
        'en': EN_TRANSLATIONS,
        'ko': KO_TRANSLATIONS,
        // Add more languages as needed
        'ja': EN_TRANSLATIONS, // Fallback to English for now
        'zh': EN_TRANSLATIONS,
        'es': EN_TRANSLATIONS,
        'fr': EN_TRANSLATIONS,
        'de': EN_TRANSLATIONS,
        'pt': EN_TRANSLATIONS,
        'ru': EN_TRANSLATIONS
    };
    
    constructor(language?: SupportedLanguage) {
        if (language && this.isSupported(language)) {
            this.currentLanguage = language;
        } else {
            this.currentLanguage = this.detectLanguage();
        }
    }
    
    private detectLanguage(): SupportedLanguage {
        // Try to detect language from Obsidian locale or system language
        if (typeof navigator !== 'undefined') {
            const browserLang = navigator.language.toLowerCase();
            
            if (browserLang.startsWith('ko')) return 'ko';
            if (browserLang.startsWith('ja')) return 'ja';
            if (browserLang.startsWith('zh')) return 'zh';
            if (browserLang.startsWith('es')) return 'es';
            if (browserLang.startsWith('fr')) return 'fr';
            if (browserLang.startsWith('de')) return 'de';
            if (browserLang.startsWith('pt')) return 'pt';
            if (browserLang.startsWith('ru')) return 'ru';
        }
        
        return 'en'; // Default to English
    }
    
    private isSupported(language: string): language is SupportedLanguage {
        return language in SUPPORTED_LANGUAGES;
    }
    
    public setLanguage(language: SupportedLanguage): void {
        if (this.isSupported(language)) {
            this.currentLanguage = language;
        }
    }
    
    public getLanguage(): SupportedLanguage {
        return this.currentLanguage;
    }
    
    public getSupportedLanguages(): Record<string, string> {
        return SUPPORTED_LANGUAGES;
    }
    
    public t(): Translation {
        return this.translations[this.currentLanguage];
    }
    
    // Helper method for getting nested translations
    public get(path: string): string {
        const keys = path.split('.');
        let value: any = this.translations[this.currentLanguage];
        
        for (const key of keys) {
            if (value && typeof value === 'object' && key in value) {
                value = value[key];
            } else {
                // Fallback to English if translation is missing
                value = this.translations['en'];
                for (const fallbackKey of keys) {
                    if (value && typeof value === 'object' && fallbackKey in value) {
                        value = value[fallbackKey];
                    } else {
                        return `[Missing translation: ${path}]`;
                    }
                }
                break;
            }
        }
        
        return typeof value === 'string' ? value : `[Invalid translation path: ${path}]`;
    }
}